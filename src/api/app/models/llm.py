from enum import StrEnum
from typing import List, Literal, Optional

from pydantic import BaseModel, Field


class BasicDetailsSteps(StrEnum):
    ASK_AGE = "ASK_AGE"
    ASK_GENDER = "ASK_GENDER"
    ASK_EDUCATION = "ASK_EDUCATION"
    ASK_HOME_LOCATION = "ASK_HOME_LOCATION"
    ASK_EMPLOYED = "ASK_EMPLOYED"
    ASK_YEARS = "ASK_YEARS"
    ASK_INDUSTRY = "ASK_INDUSTRY"
    ASK_WORK_LOCATION = "ASK_WORK_LOCATION"
    ASK_LAST_SALARY = "ASK_LAST_SALARY"
    ASK_RELOCATION = "ASK_RELOCATION"
    ASK_EXPECTED_SALARY = "ASK_EXPECTED_SALARY"
    REQUEST_RESUME = "REQUEST_RESUME"


class ApplicantDetails(BaseModel):
    age: Optional[int] = Field(
        default=None, description="The user's age", gt=18, le=60, examples=[25]
    )
    gender: Optional[Literal["Male", "Female", "Other"]] = Field(
        default=None, description="The user's gender", examples=["Male"]
    )
    education_qualification: Optional[
        Literal["8", "9", "10", "12", "Diploma", "ITI", "UG", "PG"]
    ] = Field(
        default=None, description="The user's education qualification", examples=["10"]
    )
    home_location: Optional[str] = Field(
        default=None, description="The user's home location", examples=["Bidar"]
    )
    is_currently_employed: Optional[bool] = Field(
        default=None,
        description="Whether the user is currently employed or not.",
        examples=[True],
    )
    experience: Optional[int] = Field(
        default=None, description="The user's years of experience", examples=[2], ge=0
    )
    industry: Optional[Literal["Sales", "Manufacturing", "Fresher", "Other"]] = Field(
        None, description="The user's industry", examples=["Sales"]
    )
    work_location: Optional[str] = Field(
        default=None,
        description="The user's work location",
        examples=["Sarjarpur, Bangalore"],
    )
    last_drawn_salary: Optional[int] = Field(
        default=None, description="The user's last drawn salary", examples=[18000]
    )
    willing_to_relocate: Optional[bool] = Field(
        default=None,
        description="Whether the user is open to relocation",
        examples=[True],
    )
    expected_salary: Optional[int] = Field(
        default=None, description="The user's expected salary", examples=[20000]
    )


class BasicDetails(BaseModel):
    response_to_user: str = Field(
        ...,
        description="The response generated by the LLM",
    )
    updated_data: ApplicantDetails = Field(
        ..., description="The updated applicant details after LLM processing"
    )
    next_step: BasicDetailsSteps = Field(
        default=BasicDetailsSteps.ASK_AGE,
        description="The next step to be taken after LLM processing",
    )
    is_complete: bool = Field(
        default=False, description="Whether the LLM processing is complete"
    )


class IntentEnum(StrEnum):
    JOB_INQUIRY_INITIAL_CONTACT = "Job Inquiry & Initial Contact"
    APPLICATION_SUBMISSION = "Application & Submission of Details"
    FOLLOW_UP_POST_APPLICATION_QUERIES = "Follow-up & Post-Application Queries"
    SIMPLE_AFFIRMATIONS_REJECTIONS_GREETINGS = (
        "Simple Affirmations, Rejections, & Greetings"
    )
    BROADCASTS_ADVERTISEMENTS_ADMINISTRATIVE_MESSAGES = (
        "Broadcasts, Advertisements, & Administrative Messages"
    )
    INTERRUPT = "Interrupt"


class IntentModel(BaseModel):
    classification: IntentEnum


class InterruptEnum(StrEnum):
    JOB_QUESTION = "Job Question"
    CLARIFICATION_QUESTION = "Clarification Question"
    COMPANY_QUESTION = "Company Question"
    REQUEST_CALL = "Request Call"
    BOT_QUESTION = "Bot Question"
    REFERRAL = "Referral"
    SUSPICIOUS_INQUIRY = "Suspicious Inquiry"
    UNKNOWN = "Unknown"


class InterruptModel(BaseModel):
    interrupt_type: InterruptEnum
    response_text: str


class AcceptanceModel(BaseModel):
    response_text: bool


class Reasoning(BaseModel):
    job_id: int
    status: bool
    reason: str


class MatchingJobs(BaseModel):
    job_ids: List[int]
    reasoning: List[Reasoning]
